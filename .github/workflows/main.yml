name: go-devsecops-pipeline
on:
  push:
    tags:
      - v*
    branches:
      - main
  pull_request:
    
env:
  IMAGE_NAME: hi-web-app
  REGISTRY: registry.digitalocean.com/hi-web-app
jobs:
  golangci:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.29
  gosec:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Run GoSec Security Scanner
        uses: securego/gosec@master
        with:
          args: ./...
  secretsCheck:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - uses: max/secret-scan@master
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name : checkout
        uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: '1.14'
      - name: run tests
        run: go test -json ./... > test.json

      - name: annotate tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.2.0
        with:
          test-results: test.json
  build:
    name: Build, Scan, and Publish Image
    runs-on: ubuntu-latest
    needs: [golangci, gosec, secretsCheck, test]
    steps:
      - uses: actions/checkout@v2
      - name: Build App Image
        run: docker build . --tag $IMAGE_NAME
      - uses: anchore/scan-action@v2
        id: scan
        with:
          image: hi-web-app:latest
          acs-report-enable: true
          fail-build: true
          severity-cutoff: medium
      - name: Upload anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Inspect action SARIF report
        run: cat ${{ steps.scan.outputs.sarif }}
  push:
    name: Push image to DigitalOcean Registry.
    needs: build
    steps:
      - name: Checkout master
        uses: actions/checkout@v2
      - name: Build container image
        run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) .
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600
      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
  deploy:
    name: Deploy to Digital Ocean.
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy image and start image on digital ocean droplet.
        uses: appleboy/ssh-action@v0.1.3
        with:
          HOST: ${{ secrets.DO_IP_ADDRESS }}
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
          script: |
            docker stop $(echo $IMAGE_NAME)
            docker rm $(echo $IMAGE_NAME)
            docker run -d --restart always --env-file .env -p 8000:8000 --name $(echo $IMAGE_NAME)
            $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)