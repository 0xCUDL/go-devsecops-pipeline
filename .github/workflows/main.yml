name: DevSecOps Pipeline for simple GO web app container to be published to GitHub Registry
on:
  push:
    tags:
      - v*
    branches:
      - main
  pull_request:
env:
  IMAGE_NAME: hi-web-app
jobs:
  golangci:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.29
  gosec:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Run GoSec Security Scanner
        uses: securego/gosec@master
        with:
          args: ./...
  secretsCheck:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - uses: max/secret-scan@master
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name : checkout
        uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: '1.14'

      - name: run tests
        run: go test -json ./... > test.json

      - name: annotate tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.2.0
        with:
          test-results: test.json
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [golangci, gosec, secretsCheck]
    steps:
      - uses: actions/checkout@v2
      - name: Build hi-web-app image
        run: docker build . --tag $IMAGE_NAME
      - name: Log into Github Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push poi image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
  