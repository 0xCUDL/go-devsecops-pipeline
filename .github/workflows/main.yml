name: go-devsecops-pipeline
on:
  push:
    tags:
      - v*
    branches:
      - main
  pull_request:
    
env:
  IMAGE_NAME: hi-web-app
  WEB_IMAGE: ghcr.io/llcranmer/go-devsecops-pipeline/hi-web-app:main
jobs:
  golangci:
    if: github.ref != 'refs/heads/main'
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.29
  gosec:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v2
      - name: Run GoSec Security Scanner
        uses: securego/gosec@master
        with:
          args: ./...
  secretsCheck:
      if: github.ref != 'refs/heads/main'
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - uses: max/secret-scan@master
  test:
    name: Test
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name : checkout
        uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: '1.14'
      - name: run tests
        run: go test -json ./... > test.json

      - name: annotate tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.2.0
        with:
          test-results: test.json
  build:
    name: Build, Scan, and Publish Image
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [golangci, gosec, secretsCheck, test]
    steps:
      - uses: actions/checkout@v2
      - name: Build App Image
        run: docker build . --tag $IMAGE_NAME
      - uses: anchore/scan-action@v2
        id: scan
        with:
          image: hi-web-app:latest
          acs-report-enable: true
          fail-build: true
          severity-cutoff: medium
      - name: Upload anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Inspect action SARIF report
        run: cat ${{ steps.scan.outputs.sarif }}
    
      - name: Log into GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
          
      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Generate deployment package
        run: zip -r go.zip application.go go.mod
      
      - name: Get timestamp
        uses: gerred/actions/current-time@master
        id: current-time
      
      - name: Run string replace
        uses: frabert/replace-string-action@master
        id: format-time
        with:
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: '-'
          flags: 'g'
      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v10
        with:
          aws_access_key: ${{secrets.AWS_ACCESS_GO_KEY_ID}}
          aws_secret_key: ${{secrets.AWS_SECRET_ACCESS_GO_KEY}}
          application_name: "godevsecops-docker-platform"
          environment_name: "GodevsecopsDockerPlatform-env"
          region: "us-east-2"
          version_label: "godevsecops-${{ steps.format-time.outputs.replaced }}"
          deployment_package: go.zip
